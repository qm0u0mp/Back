■ spring init
    -> application.properties(server.port 변경)
    -> controller 생성 (@RestController, @RequestMapping)
    -> 각 HTTP 요청에 따른 method 생성 (@Get, Post, Put, Patch, DeleteMaping)
        => 브라우저의 스크립트로 요청이 넘어왔을 때 같은 출처가 아니라면 CORS 정책으로 막힘
        => CorsConfig 클래스를 생성하여 CORS 정책 변경 (@Configuration, WebMvcConfigurer)
        => CorsRegistry 객체를 설정 (addMapping : URL 패턴 지정, allowedMethods : HTTP method 지정, allowedPrigins : 출처 지정)
    -> 각 HTTP 요청에서 데이터를 받음 (@RequestParam, @PathVariable, @RequestBody)
    -> 데이터를 받을 때 필수 체크 @RequestParam, @PathVariable (required 속성 사용)
    -> RequestBody는 validation 라이브러리를 활용 (build.fradle 의존성 추가)
    -> RequestBody의 JSON 데이터를 DTO로 받음
    -> RequestBody에서 유효성 검사 어노테이션으로 각 속성마다 검사 (@Notnull, @NotBlank, ...)
    -> validation을 사용해서 유효성 검사시에 유효하지 않으면 spring boot가 자동으로 response body를 생성해서 응답
        => ExceptionHandler 클래스로 validation 관려 예외 직접 처리(@RestControllerAdvice, @ExceptionHandler)
    -> 각 HTTP 응답을 직접 제어하기 위해 ResponseEntity 클래스를 사용 (status code, body, header, ... 제어함)

■ application.properties 파일 삭제함 => 깃허브 비밀키 노출 방지 위함
; server.port=4000

; spring.application.name=basic

; # MySQL(Database) Connector
; spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
; spring.datasource.url=jdbc:mysql://127.0.0.1:3306/basic?serverTimezone=UTC&characterEncoding=UTF-8
; spring.datasource.username=root
; spring.datasource.password=root

; # GitHub OAuth2.0 서비스 서버측 설정 
; spring.security.oauth2.client.registration.github.client-id=567646275a88f63e4aae
; spring.security.oauth2.client.registration.github.client-secret=ed875b3803b24a76a0e2a5a8d66a5f727d52e2bb
; spring.security.oauth2.client.registration.github.redirect-uri={baseUrl}/oauth2/callback/{registrationId}
; spring.security.oauth2.client.registration.github.authorization-grant-type=authorization_code
; spring.security.oauth2.client.registration.github.scope=read:user

; # Github OAuth2.0 인증 서버 설정 
; spring.security.oauth2.client.provider.github.authorization-uri=https://github.com/login/oauth/authorize
; spring.security.oauth2.client.provider.github.token-uri=https://github.com/login/oauth/access_token
; spring.security.oauth2.client.provider.github.user-info-uri==https://api.github.com/login/user
; spring.security.oauth2.client.provider.github.user-name-attribute=id

; # jwt 비밀키 환경 변수
; jwt.secret-key=zxcvASDFqwer1234!@#$mnbLKJHpoiu0987